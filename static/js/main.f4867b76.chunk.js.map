{"version":3,"sources":["Components/header.js","Components/listitems.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","ListItems","props","items","sort","itemToEdit","listItems","map","item","uiControls","edit","onClick","cancelEdit","id","e","saveItem","editItem","icon","window","confirm","deleteItem","key","data-id","name","type","value","fullName","onChange","handleEditInput","disabled","emailAddress","phoneNumber","sortTable","email","phone","library","add","faTrash","faPencilAlt","App","state","currentItem","addItem","bind","handleAddInput","fetch","then","response","json","result","setState","isLoaded","error","preventDefault","newItem","this","errorString","validateInputs","alert","target","Date","now","forEach","fname","filteredItems","filter","colName","sortOrder","a","b","localeCompare","toString","test","onSubmit","placeholder","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4SAeeA,G,MAZA,WACb,OACE,gCACE,yBAAKC,UAAU,UACb,yBAAKC,IAAI,WAAWD,UAAU,aAAaE,IAAI,kBAC/C,wBAAIF,UAAU,eAAd,qB,OCuGOG,MA3Gf,SAAmBC,GAEjB,IAAMC,EAAQD,EAAMC,MACdC,EAAOF,EAAME,KACbC,EAAaH,EAAMG,WAEnBC,EAAYH,EAAMI,KAAI,SAAAC,GAE1B,IACIC,EAyCJ,OAtCEA,EAJeD,EAAKE,KAIP,6BACX,4BACEZ,UAAU,eACVa,QAAS,WACPT,EAAMU,WAAWJ,EAAKK,MAH1B,UAOA,4BACEf,UAAU,aACVa,QAAS,SAACG,GACRZ,EAAMa,SAASP,EAAKK,MAHxB,SAWW,6BACX,kBAAC,IAAD,CACEf,UAAU,UACVa,QAAS,WACPT,EAAMc,SAASR,EAAKK,KAEtBI,KAAK,eAGP,kBAAC,IAAD,CACEnB,UAAU,UACVa,QAAS,WACHO,OAAOC,QAAQ,+CAA+CjB,EAAMkB,WAAWZ,EAAKK,KAE1FI,KAAK,WAMT,wBAAII,IAAKb,EAAKK,GAAIS,UAASd,EAAKK,IAC9B,4BACE,2BACEU,KAAK,WACLC,KAAK,OACLC,MAAOjB,EAAKE,KAAOL,EAAWqB,SAAWlB,EAAKkB,SAC9CC,SAAU,SAAAb,GACRZ,EAAM0B,gBAAgBd,IAExBe,UAAWrB,EAAKE,QAGpB,4BACE,2BACEa,KAAK,eACLC,KAAK,OACLC,MAAOjB,EAAKE,KAAOL,EAAWyB,aAAetB,EAAKsB,aAClDH,SAAU,SAAAb,GACRZ,EAAM0B,gBAAgBd,IAExBe,UAAWrB,EAAKE,QAGpB,4BACE,2BACEa,KAAK,cACLC,KAAK,OACLC,MAAOjB,EAAKE,KAAOL,EAAW0B,YAAcvB,EAAKuB,YACjDJ,SAAU,SAAAb,GACRZ,EAAM0B,gBAAgBd,IAExBe,UAAWrB,EAAKE,QAGpB,4BACGD,OAMT,OACE,2BAAOX,UAAU,gBACf,+BACE,4BACE,4BAAI,yBAAKA,UAAWM,EAAKmB,KAAMZ,QAAS,SAAAG,GAAC,OAAIZ,EAAM8B,UAAU,UAAzD,SACJ,4BAAI,yBAAKlC,UAAWM,EAAK6B,MAAOtB,QAAS,SAAAG,GAAC,OAAIZ,EAAM8B,UAAU,WAA1D,mBACJ,4BAAI,yBAAKlC,UAAWM,EAAK8B,MAAOvB,QAAS,SAAAG,GAAC,OAAIZ,EAAM8B,UAAU,WAA1D,iBACJ,+BAGJ,+BAAQ1B,K,cCjGd6B,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,K,IA2UGC,E,YAxUb,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KACDsC,MAAQ,CACXrC,MAAO,GACPsC,YAAa,CACXf,SAAU,GACVI,aAAc,GACdC,YAAa,GACblB,GAAI,IAENR,WAAY,CACVqB,SAAU,GACVI,aAAc,GACdC,YAAa,GACblB,GAAI,IAENT,KAAM,CACJmB,KAAM,UACNU,MAAO,UACPC,MAAO,YAIX,EAAKQ,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAK/B,WAAa,EAAKA,WAAW+B,KAAhB,gBAClB,EAAK5B,SAAW,EAAKA,SAAS4B,KAAd,gBAChB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKf,gBAAkB,EAAKA,gBAAgBe,KAArB,gBACvB,EAAK3B,SAAW,EAAKA,SAAS2B,KAAd,gBAChB,EAAKvB,WAAa,EAAKA,WAAWuB,KAAhB,gBAClB,EAAKX,UAAY,EAAKA,UAAUW,KAAf,gBA9BA,E,iFAiCE,IAAD,OAClBE,MAAM,iBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAEC,SAAAG,GACE,EAAKC,SAAS,CACZC,UAAU,EACVhD,MAAO8C,OAKX,SAAAG,GACE,EAAKF,SAAS,CACZC,UAAU,EACVC,e,8BAMFtC,GACNA,EAAEuC,iBACF,IAAMC,EAAUC,KAAKf,MAAMC,YACrBe,EAAcD,KAAKE,eAAeH,GAExC,IAAI,IAASE,EAEX,OADAE,MAAM,6BAA+BF,IAC9B,EAGP,IAAMrD,EAAK,CAAImD,GAAJ,mBAAgBC,KAAKf,MAAMrC,QAEtCoD,KAAKL,SAAS,CACZ/C,MAAOA,EACPsC,YAAa,CACXf,SAAU,GACVI,aAAc,GACdC,YAAa,GACblB,GAAI,Q,qCAKGC,GAAI,IAAD,EACVS,EAAOT,EAAE6C,OAAOpC,KACtBgC,KAAKL,SAAS,CACZT,YAAY,eACPc,KAAKf,MAAMC,aADL,mBAERlB,EAAOT,EAAE6C,OAAOlC,OAFR,mBAGLmC,KAAKC,OAHA,Q,sCAOC/C,GACd,IAAMS,EAAOT,EAAE6C,OAAOpC,KACtBgC,KAAKL,SAAS,CACZ7C,WAAW,eACNkD,KAAKf,MAAMnC,WADN,eAEPkB,EAAOT,EAAE6C,OAAOlC,Y,+BAIdZ,GACP,IAAMV,EAAQoD,KAAKf,MAAMrC,MACnBE,EAAakD,KAAKf,MAAMnC,WACxBmD,EAAcD,KAAKE,eAAepD,GAExC,IAAI,IAASmD,EAEX,OADAE,MAAM,6BAA+BF,IAC9B,EAIPrD,EAAM2D,SAAQ,SAAAtD,GACRA,EAAKK,KAAOA,IACdL,EAAKkB,SAAWrB,EAAWqB,SAC3BlB,EAAKsB,aAAezB,EAAWyB,aAC/BtB,EAAKuB,YAAc1B,EAAW0B,gBAIlCwB,KAAKL,SAAS,CACZ/C,MAAOA,EACPE,WAAY,CACVqB,SAAU,GACVI,aAAc,GACdC,YAAa,GACblB,GAAI,MAIR0C,KAAK3C,WAAWC,K,+BAIXQ,GACP,IAAMlB,EAAQoD,KAAKf,MAAMrC,MAErB4D,EAAQ,GACV9B,EAAQ,GACRC,EAAQ,GAEV/B,EAAM2D,SAAQ,SAAAtD,GACRA,EAAKK,KAAOQ,GACdb,EAAKE,MAAO,EAEZqD,EAAQvD,EAAKkB,SACbO,EAAQzB,EAAKsB,aACbI,EAAQ1B,EAAKuB,aAIbvB,EAAKE,MAAO,KAIhB6C,KAAKL,SAAS,CACZ7C,WAAY,CACVqB,SAAUqC,EACVjC,aAAcG,EACdF,YAAaG,EACbrB,GAAIQ,KAIRkC,KAAKL,SAAS,CACZ/C,MAAOA,M,iCAIAkB,GACT,IAAMlB,EAAQoD,KAAKf,MAAMrC,MACzBA,EAAM2D,SAAQ,SAAAtD,GACZA,EAAKE,MAAO,KAGd6C,KAAKL,SAAS,CACZ/C,MAAOA,M,iCAKAkB,GACT,IAAM2C,EAAgBT,KAAKf,MAAMrC,MAAM8D,QAAO,SAAAzD,GAAI,OAAIA,EAAKK,KAAOQ,KAClEkC,KAAKL,SAAS,CACZ/C,MAAO6D,M,gCAIDE,GAER,IAAI/D,EAAQoD,KAAKf,MAAMrC,MAAOgE,EAAY,GAGxCA,EAD8B,YAA7BZ,KAAKf,MAAMpC,KAAK8D,IAAuD,SAA7BX,KAAKf,MAAMpC,KAAK8D,GAC/C,MAGA,OAGC,SAAZA,EACgB,QAAdC,EACDhE,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUD,EAAE1C,SAAS4C,cAAcD,EAAE3C,aAGhDvB,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUA,EAAE3C,SAAS4C,cAAcF,EAAE1C,aAGhC,UAAZwC,EACW,QAAdC,EACDhE,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUD,EAAEtC,aAAawC,cAAcD,EAAEvC,iBAGpD3B,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUA,EAAEvC,aAAawC,cAAcF,EAAEtC,iBAGpC,UAAZoC,IACW,QAAdC,EACDhE,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUD,EAAErC,YAAYuC,cAAcD,EAAEtC,gBAGnD5B,EAAMC,MAAK,SAACgE,EAAGC,GAAJ,OAAUA,EAAEtC,YAAYuC,cAAcF,EAAErC,iBAIvDwB,KAAKL,SAAS,CACZ/C,QACAC,KAAK,eACF8D,EAAUC,O,qCAMF3D,GACb,IAAMe,EAAOf,EAAKkB,SAAS6C,WACrBtC,EAAQzB,EAAKsB,aAAayC,WAC1BrC,EAAQ1B,EAAKuB,YAAYwC,WAM3Bf,EAAc,GAuBlB,MArBa,KAATjC,EACFiC,GAAe,8BAEuB,IAThB,yBASCgB,KAAKjD,KAC5BiC,GAAe,uFAGH,KAAVvB,EACFuB,GAAe,uCAEwB,IAfjB,yDAeCgB,KAAKvC,KAC5BuB,GAAe,4CAGH,KAAVtB,EACFsB,GAAe,sCAEwB,IArBjB,WAqBCgB,KAAKtC,KAC5BsB,GAAe,uEAGG,KAAhBA,GAIGA,I,+BAIP,OACE,yBAAK1D,UAAU,OACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,cAAd,wBACA,0BAAMe,GAAG,aAAa4D,SAAUlB,KAAKb,SACnC,2BAAO5C,UAAU,eACf,+BACE,4BACE,4BACE,2BACE0B,KAAK,OACLkD,YAAY,YACZnD,KAAK,WACLE,MAAO8B,KAAKf,MAAMC,YAAYf,SAC9BC,SAAU4B,KAAKX,kBAGnB,4BACE,2BACEpB,KAAK,OACLkD,YAAY,iBACZnD,KAAK,eACLE,MAAO8B,KAAKf,MAAMC,YAAYX,aAC9BH,SAAU4B,KAAKX,kBAGnB,4BACE,2BACEpB,KAAK,OACLkD,YAAY,eACZnD,KAAK,cACLE,MAAO8B,KAAKf,MAAMC,YAAYV,YAC9BJ,SAAU4B,KAAKX,kBAGnB,4BACE,4BAAQpB,KAAK,UAAb,gBAOV,kBAAC,EAAD,CACErB,MAAOoD,KAAKf,MAAMrC,MAClBC,KAAMmD,KAAKf,MAAMpC,KACjBC,WAAYkD,KAAKf,MAAMnC,WACvBO,WAAY2C,KAAK3C,WACjBI,SAAUuC,KAAKvC,SACfD,SAAUwC,KAAKxC,SACfK,WAAYmC,KAAKnC,WACjBQ,gBAAiB2B,KAAK3B,gBACtBI,UAAWuB,KAAKvB,iB,GAlUR2C,IAAMC,WCAJC,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.f4867b76.chunk.js","sourcesContent":["import React from \"react\";\r\n// import logo from \"../logo.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"header\">\r\n        <img src=\"logo.png\" className=\"headerlogo\" alt=\"Nord Software\" />\r\n        <h1 className=\"headerTitle\">Nord Software</h1>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction ListItems(props) {\r\n\r\n  const items = props.items;\r\n  const sort = props.sort;\r\n  const itemToEdit = props.itemToEdit;\r\n\r\n  const listItems = items.map(item => {\r\n    \r\n    const editMode = item.edit;\r\n    let uiControls;\r\n\r\n    if (editMode) {\r\n      uiControls = <div>\r\n        <button\r\n          className=\"cancelButton\"\r\n          onClick={() => {\r\n            props.cancelEdit(item.id);\r\n          }}>\r\n          Cancel\r\n          </button>\r\n        <button\r\n          className=\"saveButton\"\r\n          onClick={(e) => {\r\n            props.saveItem(item.id);\r\n          }}\r\n        >\r\n          Save\r\n          </button>\r\n      </div>\r\n\r\n    } else {\r\n      uiControls = <div>\r\n        <FontAwesomeIcon\r\n          className=\"faicons\"\r\n          onClick={() => {\r\n            props.editItem(item.id);\r\n          }}\r\n          icon=\"pencil-alt\"\r\n        />\r\n\r\n        <FontAwesomeIcon\r\n          className=\"faicons\"\r\n          onClick={() => { \r\n            if (window.confirm('Are you sure you wish to delete this item?')) props.deleteItem(item.id) \r\n          }}\r\n          icon=\"trash\"\r\n        />\r\n      </div>\r\n    }\r\n\r\n    return (\r\n      <tr key={item.id} data-id={item.id}>\r\n        <td>\r\n          <input\r\n            name=\"fullName\"\r\n            type=\"text\"\r\n            value={item.edit ? itemToEdit.fullName : item.fullName}\r\n            onChange={e => {\r\n              props.handleEditInput(e);\r\n            }}\r\n            disabled={!item.edit}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            name=\"emailAddress\"\r\n            type=\"text\"\r\n            value={item.edit ? itemToEdit.emailAddress : item.emailAddress}\r\n            onChange={e => {\r\n              props.handleEditInput(e);\r\n            }}\r\n            disabled={!item.edit}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            name=\"phoneNumber\"\r\n            type=\"text\"\r\n            value={item.edit ? itemToEdit.phoneNumber : item.phoneNumber}\r\n            onChange={e => {\r\n              props.handleEditInput(e);\r\n            }}\r\n            disabled={!item.edit}\r\n          />\r\n        </td>\r\n        <td>\r\n          {uiControls}\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table className=\"contactsList\">\r\n      <thead>\r\n        <tr>\r\n          <td><div className={sort.name} onClick={e => props.sortTable('name')}>Name</div></td>\r\n          <td><div className={sort.email} onClick={e => props.sortTable('email')}>E-mail address</div></td>\r\n          <td><div className={sort.phone} onClick={e => props.sortTable('phone')}>Phone number</div></td>\r\n          <td></td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{listItems}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default ListItems;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./Components/header\";\r\nimport ListItems from \"./Components/listitems\";\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\nlibrary.add(faPencilAlt)\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        fullName: \"\",\r\n        emailAddress: \"\",\r\n        phoneNumber: \"\",\r\n        id: \"\"\r\n      },\r\n      itemToEdit: {\r\n        fullName: \"\",\r\n        emailAddress: \"\",\r\n        phoneNumber: \"\",\r\n        id: \"\"\r\n      },\r\n      sort: {\r\n        name: \"default\",\r\n        email: \"default\",\r\n        phone: \"default\",\r\n      }\r\n    };\r\n\r\n    this.addItem = this.addItem.bind(this);\r\n    this.cancelEdit = this.cancelEdit.bind(this);\r\n    this.saveItem = this.saveItem.bind(this);\r\n    this.handleAddInput = this.handleAddInput.bind(this);\r\n    this.handleEditInput = this.handleEditInput.bind(this);\r\n    this.editItem = this.editItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.sortTable = this.sortTable.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"contacts.json\")\r\n      .then(response => response.json())\r\n      .then(\r\n        // handle the result\r\n        result => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result\r\n          });\r\n        },\r\n\r\n        // Handle error\r\n        error => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  addItem(e) {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    const errorString = this.validateInputs(newItem);\r\n    \r\n    if (true !== errorString) {\r\n      alert('Please fix these issues:\\n' + errorString);\r\n      return false;\r\n    }\r\n    else {\r\n      const items = [newItem, ...this.state.items];\r\n\r\n      this.setState({\r\n        items: items,\r\n        currentItem: {\r\n          fullName: \"\",\r\n          emailAddress: \"\",\r\n          phoneNumber: \"\",\r\n          id: \"\"\r\n        }\r\n      });\r\n    }\r\n  }\r\n  handleAddInput(e) {\r\n    const name = e.target.name;\r\n    this.setState({\r\n      currentItem: {\r\n        ...this.state.currentItem,\r\n        [name]: e.target.value,\r\n        id: Date.now()\r\n      }\r\n    });\r\n  }\r\n  handleEditInput(e) {\r\n    const name = e.target.name;\r\n    this.setState({\r\n      itemToEdit: {\r\n        ...this.state.itemToEdit,\r\n        [name]: e.target.value,\r\n      }\r\n    });\r\n  }\r\n  saveItem(id) {\r\n    const items = this.state.items;\r\n    const itemToEdit = this.state.itemToEdit;\r\n    const errorString = this.validateInputs(itemToEdit);\r\n    \r\n    if (true !== errorString) {\r\n      alert('Please fix these issues:\\n' + errorString);\r\n      return false;\r\n    }\r\n    else {\r\n\r\n      items.forEach(item => {\r\n        if (item.id === id) {\r\n          item.fullName = itemToEdit.fullName;\r\n          item.emailAddress = itemToEdit.emailAddress;\r\n          item.phoneNumber = itemToEdit.phoneNumber;\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        items: items,\r\n        itemToEdit: {\r\n          fullName: \"\",\r\n          emailAddress: \"\",\r\n          phoneNumber: \"\",\r\n          id: \"\"\r\n        }\r\n      });\r\n\r\n      this.cancelEdit(id);\r\n    }\r\n  }\r\n\r\n  editItem(key) {\r\n    const items = this.state.items;\r\n\r\n    let fname = '',\r\n      email = '',\r\n      phone = '';\r\n\r\n    items.forEach(item => {\r\n      if (item.id === key) {\r\n        item.edit = true;\r\n\r\n        fname = item.fullName;\r\n        email = item.emailAddress;\r\n        phone = item.phoneNumber;\r\n\r\n      }\r\n      else {\r\n        item.edit = false;\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      itemToEdit: {\r\n        fullName: fname,\r\n        emailAddress: email,\r\n        phoneNumber: phone,\r\n        id: key\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      items: items\r\n    });\r\n\r\n  }\r\n  cancelEdit(key) {\r\n    const items = this.state.items;\r\n    items.forEach(item => {\r\n      item.edit = false;\r\n    });\r\n\r\n    this.setState({\r\n      items: items\r\n    });\r\n\r\n  }\r\n\r\n  deleteItem(key) {\r\n    const filteredItems = this.state.items.filter(item => item.id !== key);\r\n    this.setState({\r\n      items: filteredItems\r\n    });\r\n  }\r\n\r\n  sortTable(colName) {\r\n    \r\n    let items = this.state.items, sortOrder = '';\r\n\r\n    if(this.state.sort[colName] === 'default' || this.state.sort[colName] === 'desc') {\r\n      sortOrder = 'asc';\r\n    }\r\n    else {\r\n      sortOrder = 'desc';\r\n    }\r\n\r\n    if(colName === 'name') {\r\n      if(sortOrder === 'asc') {\r\n        items.sort((a, b) => a.fullName.localeCompare(b.fullName));\r\n      }\r\n      else {\r\n        items.sort((a, b) => b.fullName.localeCompare(a.fullName));\r\n      }\r\n    }\r\n    else if(colName === 'email') {\r\n      if(sortOrder === 'asc') {\r\n        items.sort((a, b) => a.emailAddress.localeCompare(b.emailAddress));\r\n      }\r\n      else {\r\n        items.sort((a, b) => b.emailAddress.localeCompare(a.emailAddress));\r\n      }\r\n    }\r\n    else if(colName === 'phone') {\r\n      if(sortOrder === 'asc') {\r\n        items.sort((a, b) => a.phoneNumber.localeCompare(b.phoneNumber));\r\n      }\r\n      else {\r\n        items.sort((a, b) => b.phoneNumber.localeCompare(a.phoneNumber));\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      items,\r\n      sort: {\r\n        [colName]: sortOrder\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  validateInputs(item) {\r\n    const name = item.fullName.toString();\r\n    const email = item.emailAddress.toString();\r\n    const phone = item.phoneNumber.toString();\r\n\r\n    const fullNamePattern = /^[a-zA-Z0-9.\\s]{5,30}$/;\r\n    const emailAddPattern = /^[a-zA-Z0-9.-]{3,15}@[a-zA-Z0-9-]{3,10}.[a-zA-Z]{2,5}$/;\r\n    const phoneNumPattern = /^\\d{10}$/;\r\n\r\n    let errorString = '';\r\n\r\n    if (name === '') {\r\n      errorString += '\\t- Name cannot be empty\\n';\r\n    }\r\n    else if (fullNamePattern.test(name) === false) {\r\n      errorString += '\\t- Name can only contain letters, numbers and space and must be 5-20 characters.\\n';\r\n    }\r\n\r\n    if (email === \"\") {\r\n      errorString += '\\t- Email address cannot be empty\\n';\r\n    }\r\n    else if (emailAddPattern.test(email) === false) {\r\n      errorString += '\\t- Please enter a valid email address\\n';\r\n    }\r\n\r\n    if (phone === \"\") {\r\n      errorString += '\\t- Phone number cannot be empty\\n';\r\n    }\r\n    else if (phoneNumPattern.test(phone) === false) {\r\n      errorString += '\\t- Phone number can only contain numbers and must have 10 digits\\n';\r\n    }\r\n\r\n    if (errorString === '') {\r\n      return true;\r\n    }\r\n\r\n    return errorString;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <h1 className=\"listHeader\">List of participants</h1>\r\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n          <table className=\"addcontacts\">\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Full name\"\r\n                    name=\"fullName\"\r\n                    value={this.state.currentItem.fullName}\r\n                    onChange={this.handleAddInput}\r\n                  ></input>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"E-mail address\"\r\n                    name=\"emailAddress\"\r\n                    value={this.state.currentItem.emailAddress}\r\n                    onChange={this.handleAddInput}\r\n                  ></input>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Phone number\"\r\n                    name=\"phoneNumber\"\r\n                    value={this.state.currentItem.phoneNumber}\r\n                    onChange={this.handleAddInput}\r\n                  ></input>\r\n                </td>\r\n                <td>\r\n                  <button type=\"submit\">Add new</button>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n          </table>\r\n        </form>\r\n\r\n        <ListItems\r\n          items={this.state.items}\r\n          sort={this.state.sort}\r\n          itemToEdit={this.state.itemToEdit}\r\n          cancelEdit={this.cancelEdit}\r\n          editItem={this.editItem}\r\n          saveItem={this.saveItem}\r\n          deleteItem={this.deleteItem}\r\n          handleEditInput={this.handleEditInput}\r\n          sortTable={this.sortTable}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}